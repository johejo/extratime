package extratime

// This file is auto-generated by internal/gen.go. DO NOT EDIT.
//go:generate go run internal/gen.go
import (
	"encoding/json"
	"encoding/xml"
	"time"
)

type (
	ANSIC         struct{ time.Time }
	UnixDate      struct{ time.Time }
	RFC1123       struct{ time.Time }
	RFC1123Z      struct{ time.Time }
	RFC822        struct{ time.Time }
	RFC822Z       struct{ time.Time }
	RFC850        struct{ time.Time }
	Kitchen       struct{ time.Time }
	Stamp         struct{ time.Time }
	StampMilli    struct{ time.Time }
	StampMicro    struct{ time.Time }
	StampNano     struct{ time.Time }
	RubyDate      struct{ time.Time }
	UnixTimeStamp struct{ time.Time }
)

var (
	_ json.Unmarshaler = (*ANSIC)(nil)
	_ json.Marshaler   = (*ANSIC)(nil)
	_ xml.Unmarshaler  = (*ANSIC)(nil)
	_ xml.Marshaler    = (*ANSIC)(nil)
	_ json.Unmarshaler = (*UnixDate)(nil)
	_ json.Marshaler   = (*UnixDate)(nil)
	_ xml.Unmarshaler  = (*UnixDate)(nil)
	_ xml.Marshaler    = (*UnixDate)(nil)
	_ json.Unmarshaler = (*RFC1123)(nil)
	_ json.Marshaler   = (*RFC1123)(nil)
	_ xml.Unmarshaler  = (*RFC1123)(nil)
	_ xml.Marshaler    = (*RFC1123)(nil)
	_ json.Unmarshaler = (*RFC1123Z)(nil)
	_ json.Marshaler   = (*RFC1123Z)(nil)
	_ xml.Unmarshaler  = (*RFC1123Z)(nil)
	_ xml.Marshaler    = (*RFC1123Z)(nil)
	_ json.Unmarshaler = (*RFC822)(nil)
	_ json.Marshaler   = (*RFC822)(nil)
	_ xml.Unmarshaler  = (*RFC822)(nil)
	_ xml.Marshaler    = (*RFC822)(nil)
	_ json.Unmarshaler = (*RFC822Z)(nil)
	_ json.Marshaler   = (*RFC822Z)(nil)
	_ xml.Unmarshaler  = (*RFC822Z)(nil)
	_ xml.Marshaler    = (*RFC822Z)(nil)
	_ json.Unmarshaler = (*RFC850)(nil)
	_ json.Marshaler   = (*RFC850)(nil)
	_ xml.Unmarshaler  = (*RFC850)(nil)
	_ xml.Marshaler    = (*RFC850)(nil)
	_ json.Unmarshaler = (*Kitchen)(nil)
	_ json.Marshaler   = (*Kitchen)(nil)
	_ xml.Unmarshaler  = (*Kitchen)(nil)
	_ xml.Marshaler    = (*Kitchen)(nil)
	_ json.Unmarshaler = (*Stamp)(nil)
	_ json.Marshaler   = (*Stamp)(nil)
	_ xml.Unmarshaler  = (*Stamp)(nil)
	_ xml.Marshaler    = (*Stamp)(nil)
	_ json.Unmarshaler = (*StampMilli)(nil)
	_ json.Marshaler   = (*StampMilli)(nil)
	_ xml.Unmarshaler  = (*StampMilli)(nil)
	_ xml.Marshaler    = (*StampMilli)(nil)
	_ json.Unmarshaler = (*StampMicro)(nil)
	_ json.Marshaler   = (*StampMicro)(nil)
	_ xml.Unmarshaler  = (*StampMicro)(nil)
	_ xml.Marshaler    = (*StampMicro)(nil)
	_ json.Unmarshaler = (*StampNano)(nil)
	_ json.Marshaler   = (*StampNano)(nil)
	_ xml.Unmarshaler  = (*StampNano)(nil)
	_ xml.Marshaler    = (*StampNano)(nil)
	_ json.Unmarshaler = (*RubyDate)(nil)
	_ json.Marshaler   = (*RubyDate)(nil)
	_ xml.Unmarshaler  = (*RubyDate)(nil)
	_ xml.Marshaler    = (*RubyDate)(nil)
	_ json.Unmarshaler = (*UnixTimeStamp)(nil)
	_ json.Marshaler   = (*UnixTimeStamp)(nil)
	_ xml.Unmarshaler  = (*UnixTimeStamp)(nil)
	_ xml.Marshaler    = (*UnixTimeStamp)(nil)
)

func (t ANSIC) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.ANSIC) + `"`), nil
}
func (t ANSIC) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.ANSIC), start)
}
func (t *ANSIC) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.ANSIC, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *ANSIC) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.ANSIC, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t UnixDate) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.UnixDate) + `"`), nil
}
func (t UnixDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.UnixDate), start)
}
func (t *UnixDate) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.UnixDate, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *UnixDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.UnixDate, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RFC1123) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RFC1123) + `"`), nil
}
func (t RFC1123) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RFC1123), start)
}
func (t *RFC1123) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC1123, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RFC1123) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC1123, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RFC1123Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RFC1123Z) + `"`), nil
}
func (t RFC1123Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RFC1123Z), start)
}
func (t *RFC1123Z) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC1123Z, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RFC1123Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC1123Z, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RFC822) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RFC822) + `"`), nil
}
func (t RFC822) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RFC822), start)
}
func (t *RFC822) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC822, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RFC822) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC822, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RFC822Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RFC822Z) + `"`), nil
}
func (t RFC822Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RFC822Z), start)
}
func (t *RFC822Z) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC822Z, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RFC822Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC822Z, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RFC850) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RFC850) + `"`), nil
}
func (t RFC850) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RFC850), start)
}
func (t *RFC850) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC850, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RFC850) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC850, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t Kitchen) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.Kitchen) + `"`), nil
}
func (t Kitchen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.Kitchen), start)
}
func (t *Kitchen) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.Kitchen, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *Kitchen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.Kitchen, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t Stamp) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.Stamp) + `"`), nil
}
func (t Stamp) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.Stamp), start)
}
func (t *Stamp) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.Stamp, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *Stamp) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.Stamp, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t StampMilli) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.StampMilli) + `"`), nil
}
func (t StampMilli) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.StampMilli), start)
}
func (t *StampMilli) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.StampMilli, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *StampMilli) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.StampMilli, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t StampMicro) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.StampMicro) + `"`), nil
}
func (t StampMicro) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.StampMicro), start)
}
func (t *StampMicro) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.StampMicro, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *StampMicro) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.StampMicro, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t StampNano) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.StampNano) + `"`), nil
}
func (t StampNano) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.StampNano), start)
}
func (t *StampNano) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.StampNano, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *StampNano) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.StampNano, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t RubyDate) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Format(time.RubyDate) + `"`), nil
}
func (t RubyDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Format(time.RubyDate), start)
}
func (t *RubyDate) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RubyDate, trim(data))
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
func (t *RubyDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RubyDate, s)
	if err != nil {
		return err
	}
	t.Time = tt
	return nil
}
