package extratime

import (
	"encoding/json"
	"encoding/xml"
	"time"
)

// This file is auto-generated by internal/gen.go. DO NOT EDIT.
//go:generate go run internal/gen.go
type (
	Time     = time.Time
	RFC1123  Time
	RFC1123Z Time
	RFC822   Time
	RFC822Z  Time
	RFC850   Time
	Kitchen  Time
	RubyDate Time
)

var (
	_ json.Unmarshaler = (*RFC1123)(nil)
	_ json.Marshaler   = (*RFC1123)(nil)
	_ xml.Unmarshaler  = (*RFC1123)(nil)
	_ xml.Marshaler    = (*RFC1123)(nil)
	_ json.Unmarshaler = (*RFC1123Z)(nil)
	_ json.Marshaler   = (*RFC1123Z)(nil)
	_ xml.Unmarshaler  = (*RFC1123Z)(nil)
	_ xml.Marshaler    = (*RFC1123Z)(nil)
	_ json.Unmarshaler = (*RFC822)(nil)
	_ json.Marshaler   = (*RFC822)(nil)
	_ xml.Unmarshaler  = (*RFC822)(nil)
	_ xml.Marshaler    = (*RFC822)(nil)
	_ json.Unmarshaler = (*RFC822Z)(nil)
	_ json.Marshaler   = (*RFC822Z)(nil)
	_ xml.Unmarshaler  = (*RFC822Z)(nil)
	_ xml.Marshaler    = (*RFC822Z)(nil)
	_ json.Unmarshaler = (*RFC850)(nil)
	_ json.Marshaler   = (*RFC850)(nil)
	_ xml.Unmarshaler  = (*RFC850)(nil)
	_ xml.Marshaler    = (*RFC850)(nil)
	_ json.Unmarshaler = (*Kitchen)(nil)
	_ json.Marshaler   = (*Kitchen)(nil)
	_ xml.Unmarshaler  = (*Kitchen)(nil)
	_ xml.Marshaler    = (*Kitchen)(nil)
	_ json.Unmarshaler = (*RubyDate)(nil)
	_ json.Marshaler   = (*RubyDate)(nil)
	_ xml.Unmarshaler  = (*RubyDate)(nil)
	_ xml.Marshaler    = (*RubyDate)(nil)
)

func (i RFC1123) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RFC1123) + `"`), nil
}
func (i RFC1123) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RFC1123), start)
}
func (i *RFC1123) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RFC1123, cut(data))
	if err != nil {
		return err
	}
	*i = RFC1123(t)
	return nil
}
func (i *RFC1123) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RFC1123, s)
	if err != nil {
		return err
	}
	*i = RFC1123(t)
	return nil
}
func (i RFC1123Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RFC1123Z) + `"`), nil
}
func (i RFC1123Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RFC1123Z), start)
}
func (i *RFC1123Z) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RFC1123Z, cut(data))
	if err != nil {
		return err
	}
	*i = RFC1123Z(t)
	return nil
}
func (i *RFC1123Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RFC1123Z, s)
	if err != nil {
		return err
	}
	*i = RFC1123Z(t)
	return nil
}
func (i RFC822) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RFC822) + `"`), nil
}
func (i RFC822) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RFC822), start)
}
func (i *RFC822) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RFC822, cut(data))
	if err != nil {
		return err
	}
	*i = RFC822(t)
	return nil
}
func (i *RFC822) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RFC822, s)
	if err != nil {
		return err
	}
	*i = RFC822(t)
	return nil
}
func (i RFC822Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RFC822Z) + `"`), nil
}
func (i RFC822Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RFC822Z), start)
}
func (i *RFC822Z) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RFC822Z, cut(data))
	if err != nil {
		return err
	}
	*i = RFC822Z(t)
	return nil
}
func (i *RFC822Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RFC822Z, s)
	if err != nil {
		return err
	}
	*i = RFC822Z(t)
	return nil
}
func (i RFC850) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RFC850) + `"`), nil
}
func (i RFC850) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RFC850), start)
}
func (i *RFC850) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RFC850, cut(data))
	if err != nil {
		return err
	}
	*i = RFC850(t)
	return nil
}
func (i *RFC850) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RFC850, s)
	if err != nil {
		return err
	}
	*i = RFC850(t)
	return nil
}
func (i Kitchen) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.Kitchen) + `"`), nil
}
func (i Kitchen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.Kitchen), start)
}
func (i *Kitchen) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.Kitchen, cut(data))
	if err != nil {
		return err
	}
	*i = Kitchen(t)
	return nil
}
func (i *Kitchen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.Kitchen, s)
	if err != nil {
		return err
	}
	*i = Kitchen(t)
	return nil
}
func (i RubyDate) MarshalJSON() ([]byte, error) {
	return []byte(`"` + Time(i).Format(time.RubyDate) + `"`), nil
}
func (i RubyDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(Time(i).Format(time.RubyDate), start)
}
func (i *RubyDate) UnmarshalJSON(data []byte) error {
	t, err := time.Parse(time.RubyDate, cut(data))
	if err != nil {
		return err
	}
	*i = RubyDate(t)
	return nil
}
func (i *RubyDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	t, err := time.Parse(time.RubyDate, s)
	if err != nil {
		return err
	}
	*i = RubyDate(t)
	return nil
}
