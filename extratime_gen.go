package extratime

import (
	"encoding/json"
	"encoding/xml"
	"time"
)

// This file is auto-generated by internal/gen.go. DO NOT EDIT.
//go:generate go run internal/gen.go
type (
	RFC1123       time.Time
	RFC1123Z      time.Time
	RFC822        time.Time
	RFC822Z       time.Time
	RFC850        time.Time
	Kitchen       time.Time
	RubyDate      time.Time
	UnixTimeStamp time.Time
)

var (
	_ json.Unmarshaler = (*RFC1123)(nil)
	_ json.Marshaler   = (*RFC1123)(nil)
	_ xml.Unmarshaler  = (*RFC1123)(nil)
	_ xml.Marshaler    = (*RFC1123)(nil)
	_ json.Unmarshaler = (*RFC1123Z)(nil)
	_ json.Marshaler   = (*RFC1123Z)(nil)
	_ xml.Unmarshaler  = (*RFC1123Z)(nil)
	_ xml.Marshaler    = (*RFC1123Z)(nil)
	_ json.Unmarshaler = (*RFC822)(nil)
	_ json.Marshaler   = (*RFC822)(nil)
	_ xml.Unmarshaler  = (*RFC822)(nil)
	_ xml.Marshaler    = (*RFC822)(nil)
	_ json.Unmarshaler = (*RFC822Z)(nil)
	_ json.Marshaler   = (*RFC822Z)(nil)
	_ xml.Unmarshaler  = (*RFC822Z)(nil)
	_ xml.Marshaler    = (*RFC822Z)(nil)
	_ json.Unmarshaler = (*RFC850)(nil)
	_ json.Marshaler   = (*RFC850)(nil)
	_ xml.Unmarshaler  = (*RFC850)(nil)
	_ xml.Marshaler    = (*RFC850)(nil)
	_ json.Unmarshaler = (*Kitchen)(nil)
	_ json.Marshaler   = (*Kitchen)(nil)
	_ xml.Unmarshaler  = (*Kitchen)(nil)
	_ xml.Marshaler    = (*Kitchen)(nil)
	_ json.Unmarshaler = (*RubyDate)(nil)
	_ json.Marshaler   = (*RubyDate)(nil)
	_ xml.Unmarshaler  = (*RubyDate)(nil)
	_ xml.Marshaler    = (*RubyDate)(nil)
	_ json.Unmarshaler = (*UnixTimeStamp)(nil)
	_ json.Marshaler   = (*UnixTimeStamp)(nil)
	_ xml.Unmarshaler  = (*UnixTimeStamp)(nil)
	_ xml.Marshaler    = (*UnixTimeStamp)(nil)
)

func (t *RFC1123) Time() time.Time {
	return time.Time(*t)
}
func (t RFC1123) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RFC1123) + `"`), nil
}
func (t RFC1123) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RFC1123), start)
}
func (t *RFC1123) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC1123, trim(data))
	if err != nil {
		return err
	}
	*t = RFC1123(tt)
	return nil
}
func (t *RFC1123) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC1123, s)
	if err != nil {
		return err
	}
	*t = RFC1123(tt)
	return nil
}
func (t *RFC1123Z) Time() time.Time {
	return time.Time(*t)
}
func (t RFC1123Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RFC1123Z) + `"`), nil
}
func (t RFC1123Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RFC1123Z), start)
}
func (t *RFC1123Z) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC1123Z, trim(data))
	if err != nil {
		return err
	}
	*t = RFC1123Z(tt)
	return nil
}
func (t *RFC1123Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC1123Z, s)
	if err != nil {
		return err
	}
	*t = RFC1123Z(tt)
	return nil
}
func (t *RFC822) Time() time.Time {
	return time.Time(*t)
}
func (t RFC822) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RFC822) + `"`), nil
}
func (t RFC822) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RFC822), start)
}
func (t *RFC822) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC822, trim(data))
	if err != nil {
		return err
	}
	*t = RFC822(tt)
	return nil
}
func (t *RFC822) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC822, s)
	if err != nil {
		return err
	}
	*t = RFC822(tt)
	return nil
}
func (t *RFC822Z) Time() time.Time {
	return time.Time(*t)
}
func (t RFC822Z) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RFC822Z) + `"`), nil
}
func (t RFC822Z) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RFC822Z), start)
}
func (t *RFC822Z) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC822Z, trim(data))
	if err != nil {
		return err
	}
	*t = RFC822Z(tt)
	return nil
}
func (t *RFC822Z) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC822Z, s)
	if err != nil {
		return err
	}
	*t = RFC822Z(tt)
	return nil
}
func (t *RFC850) Time() time.Time {
	return time.Time(*t)
}
func (t RFC850) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RFC850) + `"`), nil
}
func (t RFC850) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RFC850), start)
}
func (t *RFC850) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RFC850, trim(data))
	if err != nil {
		return err
	}
	*t = RFC850(tt)
	return nil
}
func (t *RFC850) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RFC850, s)
	if err != nil {
		return err
	}
	*t = RFC850(tt)
	return nil
}
func (t *Kitchen) Time() time.Time {
	return time.Time(*t)
}
func (t Kitchen) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.Kitchen) + `"`), nil
}
func (t Kitchen) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.Kitchen), start)
}
func (t *Kitchen) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.Kitchen, trim(data))
	if err != nil {
		return err
	}
	*t = Kitchen(tt)
	return nil
}
func (t *Kitchen) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.Kitchen, s)
	if err != nil {
		return err
	}
	*t = Kitchen(tt)
	return nil
}
func (t *RubyDate) Time() time.Time {
	return time.Time(*t)
}
func (t RubyDate) MarshalJSON() ([]byte, error) {
	return []byte(`"` + t.Time().Format(time.RubyDate) + `"`), nil
}
func (t RubyDate) MarshalXML(e *xml.Encoder, start xml.StartElement) error {
	return e.EncodeElement(t.Time().Format(time.RubyDate), start)
}
func (t *RubyDate) UnmarshalJSON(data []byte) error {
	tt, err := time.Parse(time.RubyDate, trim(data))
	if err != nil {
		return err
	}
	*t = RubyDate(tt)
	return nil
}
func (t *RubyDate) UnmarshalXML(d *xml.Decoder, start xml.StartElement) error {
	var s string
	if err := d.DecodeElement(&s, &start); err != nil {
		return err
	}
	tt, err := time.Parse(time.RubyDate, s)
	if err != nil {
		return err
	}
	*t = RubyDate(tt)
	return nil
}
func (t *UnixTimeStamp) Time() time.Time {
	return time.Time(*t)
}
